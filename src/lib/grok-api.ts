// Module API Grok pour l'Assistant IA YouCode
import { GROK_CONFIG } from './grok-config';

export interface GrokMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface GrokRequest {
  model: string;
  messages: GrokMessage[];
  max_tokens?: number;
  temperature?: number;
  top_p?: number;
  frequency_penalty?: number;
  presence_penalty?: number;
  stream?: boolean;
}

export interface GrokResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export interface GrokError {
  error: {
    message: string;
    type: string;
    code: string;
  };
}

export class GrokAPI {
  private apiKey: string | undefined;
  private conversationHistory: GrokMessage[] = [];

  constructor() {
    this.apiKey = process.env.GROK_API_KEY;
    this.initializeConversation();
  }

  /**
   * Initialise la conversation avec le message syst√®me
   */
  private initializeConversation(): void {
    this.conversationHistory = [
      {
        role: 'system',
        content: GROK_CONFIG.systemPrompts.default
      }
    ];
  }

  /**
   * G√©n√®re une r√©ponse via l'API Grok
   */
  async generateResponse(
    userMessage: string,
    context?: {
      courseName?: string;
      lessonName?: string;
      userLevel?: 'beginner' | 'intermediate' | 'advanced';
      topic?: string;
    }
  ): Promise<string> {
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è GROK_API_KEY non configur√©e, utilisation des r√©ponses simul√©es');
      return this.generateSimulatedResponse(userMessage, context);
    }

    try {
      // Adapter le message syst√®me selon le contexte
      this.adaptSystemPrompt(context);
      
      // Ajouter le message utilisateur √† l'historique
      this.conversationHistory.push({
        role: 'user',
        content: userMessage
      });

      // Appeler l'API Grok
      const response = await this.callGrokAPI();
      
      if (response) {
        // Ajouter la r√©ponse √† l'historique
        this.conversationHistory.push({
          role: 'assistant',
          content: response
        });

        // Limiter la taille de l'historique
        this.trimConversationHistory();
        
        return response;
      }

      // Fallback vers les r√©ponses simul√©es
      return this.generateSimulatedResponse(userMessage, context);

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'appel √† Grok:', error);
      return this.generateSimulatedResponse(userMessage, context);
    }
  }

  /**
   * Appelle l'API Grok
   */
  private async callGrokAPI(): Promise<string | null> {
    try {
      const requestBody: GrokRequest = {
        model: GROK_CONFIG.models.default,
        messages: this.conversationHistory,
        max_tokens: GROK_CONFIG.generation.maxTokens,
        temperature: GROK_CONFIG.generation.temperature,
        top_p: GROK_CONFIG.generation.topP,
        frequency_penalty: GROK_CONFIG.generation.frequencyPenalty,
        presence_penalty: GROK_CONFIG.generation.presencePenalty,
        stream: false
      };

      console.log('üåê Appel API Grok...');
      
      const response = await fetch(`${GROK_CONFIG.apiUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          ...GROK_CONFIG.headers,
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData: GrokError = await response.json();
        console.error(`‚ùå Erreur Grok: ${response.status} - ${errorData.error.message}`);
        return null;
      }

      const data: GrokResponse = await response.json();
      
      console.log('‚úÖ R√©ponse Grok re√ßue');

      if (data.choices && data.choices.length > 0) {
        const rawResponse = data.choices[0].message.content;
        return this.cleanGrokResponse(rawResponse);
      }

      return null;

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'appel √† Grok:', error);
      return null;
    }
  }

  /**
   * Adapte le message syst√®me selon le contexte
   */
  private adaptSystemPrompt(context?: {
    courseName?: string;
    lessonName?: string;
    userLevel?: string;
    topic?: string;
  }): void {
    let systemPrompt = GROK_CONFIG.systemPrompts.default;

    if (context?.courseName) {
      systemPrompt += `\n\nContexte actuel: Cours "${context.courseName}"`;
    }

    if (context?.lessonName) {
      systemPrompt += `\nLe√ßon actuelle: "${context.lessonName}"`;
    }

    if (context?.userLevel) {
      systemPrompt += `\nNiveau de l'utilisateur: ${context.userLevel}`;
    }

    if (context?.topic) {
      systemPrompt += `\nSujet abord√©: ${context.topic}`;
    }

    // Mettre √† jour le premier message syst√®me
    if (this.conversationHistory.length > 0) {
      this.conversationHistory[0].content = systemPrompt;
    }
  }

  /**
   * Limite la taille de l'historique de conversation
   */
  private trimConversationHistory(): void {
    const maxMessages = GROK_CONFIG.limits.maxConversationLength;
    
    if (this.conversationHistory.length > maxMessages) {
      // Garder le message syst√®me et les derniers messages
      const systemMessage = this.conversationHistory[0];
      const recentMessages = this.conversationHistory.slice(-maxMessages + 1);
      this.conversationHistory = [systemMessage, ...recentMessages];
    }
  }

  /**
   * Nettoie sp√©cifiquement les r√©ponses Grok
   */
  private cleanGrokResponse(response: string): string {
    let cleaned = response;
    
    // Supprimer les salutations excessives
    cleaned = cleaned.replace(/^Bonjour\s*!?\s*üòä?\s*/i, '');
    cleaned = cleaned.replace(/^Salut\s*!?\s*/i, '');
    cleaned = cleaned.replace(/^Hello\s*!?\s*/i, '');
    
    // Supprimer les phrases d'introduction verbeuses
    cleaned = cleaned.replace(/^Je suis ravi de te guider.*?programmation\s*!?\s*üöÄ?\s*/i, '');
    cleaned = cleaned.replace(/^Je suis l√† pour t'aider.*?programmation\s*!?\s*/i, '');
    
    // Supprimer les questions rh√©toriques excessives
    cleaned = cleaned.replace(/^Avant de commencer.*?ü§î\s*/i, '');
    cleaned = cleaned.replace(/^Qu'est-ce que tu veux apprendre.*?ü§î\s*/i, '');
    
    // Supprimer les listes num√©rot√©es excessives (approche compatible)
    cleaned = cleaned.replace(/^\d+\.\s*\*\*[^*]+\*\*.*$/gm, '');
    
    // Supprimer les notes entre parenth√®ses
    cleaned = cleaned.replace(/\s*\([^)]*\)/g, '');
    
    // Supprimer les emojis excessifs (garder seulement 1-2)
    cleaned = cleaned.replace(/([üöÄüíªüìöüéØ‚ú®üîêüì±‚öõÔ∏èüé®üêçüåê]){2,}/g, '$1');
    
    // Supprimer les sauts de ligne multiples
    cleaned = cleaned.replace(/\n{3,}/g, '\n\n');
    
    // Supprimer les espaces en d√©but et fin
    cleaned = cleaned.trim();
    
    // Si la r√©ponse est trop courte apr√®s nettoyage, la restaurer partiellement
    if (cleaned.length < 20) {
      // Garder seulement la premi√®re phrase utile
      const sentences = response.split(/[.!?]/);
      const firstUsefulSentence = sentences.find(s => 
        s.trim().length > 10 && 
        !s.includes('Bonjour') && 
        !s.includes('Salut') && 
        !s.includes('Hello')
      );
      
      if (firstUsefulSentence) {
        cleaned = firstUsefulSentence.trim() + '.';
      }
    }
    
    return cleaned;
  }

  /**
   * G√©n√®re une r√©ponse simul√©e intelligente (fallback)
   */
  private generateSimulatedResponse(
    prompt: string, 
    context?: {
      courseName?: string;
      lessonName?: string;
      userLevel?: string;
      topic?: string;
    }
  ): string {
    const lowerPrompt = prompt.toLowerCase();
    
    // R√©ponses contextuelles intelligentes
    if (lowerPrompt.includes('javascript') || lowerPrompt.includes('js')) {
      return "JavaScript est un excellent langage pour d√©buter ! C'est le langage du web moderne. Sur YouCode, nous avons des cours JavaScript qui vous feront passer de d√©butant √† d√©veloppeur web confirm√©. Voulez-vous commencer par les bases ? üåê";
    }
    
    if (lowerPrompt.includes('python')) {
      return "Python est parfait pour les d√©butants ! C'est un langage puissant et lisible, id√©al pour l'apprentissage automatique, la science des donn√©es et le d√©veloppement web. Nous avons des cours Python progressifs sur YouCode. üêç";
    }
    
    if (lowerPrompt.includes('react') || lowerPrompt.includes('vue') || lowerPrompt.includes('angular')) {
      return "Les frameworks frontend modernes comme React, Vue et Angular sont excellents pour cr√©er des applications web interactives ! Nous avons des cours d√©di√©s √† ces technologies sur YouCode. Quel framework vous int√©resse ? ‚öõÔ∏è";
    }
    
    if (lowerPrompt.includes('connexion') || lowerPrompt.includes('connecter')) {
      return "Pour vous connecter √† YouCode, utilisez le bouton de connexion en haut √† droite. Vous pouvez cr√©er un compte gratuitement ou vous connecter avec Google. Une fois connect√©, vous aurez acc√®s √† tous les cours et fonctionnalit√©s ! üîê";
    }
    
    if (lowerPrompt.includes('cours') || lowerPrompt.includes('course')) {
      if (lowerPrompt.includes('javascript') || lowerPrompt.includes('js')) {
        return "Pour les cours JavaScript sur YouCode, nous avons plusieurs options selon votre niveau. Nous proposons des cours d√©butant, interm√©diaire et avanc√©. Voulez-vous que je vous guide vers le cours qui vous convient le mieux ? üåê";
      }
      return "Les cours sur YouCode sont organis√©s par niveau et par technologie. Vous pouvez parcourir le catalogue, rejoindre des cours qui correspondent √† vos besoins, et suivre votre progression. üìö";
    }
    
    if (lowerPrompt.includes('bonjour') || lowerPrompt.includes('hello') || lowerPrompt.includes('salut')) {
      return "Bonjour ! Je suis votre assistant IA YouCode. Je suis l√† pour vous aider avec vos questions de programmation et vous guider dans votre apprentissage. Comment puis-je vous √™tre utile aujourd'hui ? üöÄ";
    }
    
    // R√©ponse par d√©faut contextuelle
    if (context?.courseName) {
      return `Excellente question sur le cours "${context.courseName}" ! Je suis votre assistant IA YouCode, sp√©cialis√© en programmation. Je peux vous aider avec ce cours sp√©cifique ou toute autre question de programmation. Que souhaitez-vous savoir ? üíª`;
    }
    
    return "Excellente question ! Je suis votre assistant IA YouCode, sp√©cialis√© dans l'apprentissage de la programmation. Je peux vous aider avec les cours, les le√ßons, les concepts de code, ou toute autre question sur la plateforme. üöÄ";
  }

  /**
   * V√©rifie si l'API est accessible
   */
  async healthCheck(): Promise<boolean> {
    try {
      if (!this.apiKey) return false;
      
      const response = await fetch(`${GROK_CONFIG.apiUrl}/models`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
        },
      });
      return response.ok;
    } catch (error) {
      console.error('Erreur de sant√© Grok:', error);
      return false;
    }
  }

  /**
   * Efface l'historique de conversation
   */
  clearConversation(): void {
    this.initializeConversation();
  }

  /**
   * Obtient l'historique de conversation
   */
  getConversationHistory(): GrokMessage[] {
    return [...this.conversationHistory];
  }
}

// Instance singleton
export const grokAPI = new GrokAPI();
